/*
Copyright 2021 Broadwell Consulting Inc.

Permission is hereby granted, free of charge, to any person obtaining a 
 * copy of this software and associated documentation files (the "Software"), 
 * to deal in the Software without restriction, including without limitation 
 * the rights to use, copy, modify, merge, publish, distribute, sublicense, 
 * and/or sell copies of the Software, and to permit persons to whom the 
 * Software is furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in 
 * all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR 
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, 
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL 
 * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR 
 * OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, 
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR 
 * OTHER DEALINGS IN THE SOFTWARE.
*/
#include "serialWombat.h"
#include <stdint.h>
#include "asciiConversion.h"




#define SEG_A 0x1
#define SEG_B 0x2
#define SEG_C 0x4
#define SEG_D 0x8
#define SEG_E 0x10
#define SEG_F 0x20
#define SEG_G 0x40
#define SEG_POINT 0x80
#define OFF__ 0
const uint8_t seven_seg_table[]={
//  a 
// f b
//  g 
// e c
//  d 

#define INV__  SEG_E  // No valid way to show this character.  Show error bar

OFF__|OFF__|OFF__|OFF__|OFF__|OFF__|OFF__|OFF__,   //SPACE, 0x20
OFF__|SEG_B|OFF__|OFF__|OFF__|OFF__|OFF__|OFF__,   //!    
OFF__|SEG_B|OFF__|OFF__|OFF__|SEG_F|OFF__|OFF__,   //"    
OFF__|OFF__|OFF__|OFF__|OFF__|OFF__|OFF__|INV__,   //#    
SEG_A|OFF__|SEG_C|SEG_D|OFF__|SEG_F|SEG_G|OFF__,   //$    
OFF__|OFF__|SEG_C|OFF__|OFF__|SEG_F|SEG_G|OFF__,   //%    
OFF__|OFF__|OFF__|OFF__|OFF__|OFF__|OFF__|INV__,   //&    
OFF__|SEG_B|OFF__|OFF__|OFF__|OFF__|OFF__|OFF__,   //'    
SEG_A|OFF__|OFF__|SEG_D|SEG_E|SEG_F|OFF__|OFF__,   //(    
SEG_A|SEG_B|SEG_C|SEG_D|OFF__|OFF__|OFF__|OFF__,   //)    
SEG_A|OFF__|OFF__|OFF__|OFF__|OFF__|OFF__|OFF__,   //*    
OFF__|OFF__|OFF__|OFF__|OFF__|OFF__|OFF__|INV__,   //+    
OFF__|OFF__|SEG_C|OFF__|OFF__|OFF__|OFF__|OFF__,   //,    
OFF__|OFF__|OFF__|OFF__|OFF__|OFF__|SEG_G|OFF__,   //-    
OFF__|OFF__|OFF__|OFF__|OFF__|OFF__|OFF__|INV__,   //.    
OFF__|SEG_B|OFF__|SEG_D|OFF__|OFF__|SEG_G|OFF__,   ///    
SEG_A|SEG_B|SEG_C|OFF__|SEG_E|SEG_F|OFF__|OFF__,   //0
OFF__|SEG_B|SEG_C|OFF__|OFF__|OFF__|OFF__|OFF__,   //1    
SEG_A|SEG_B|OFF__|SEG_D|SEG_E|OFF__|SEG_G|OFF__,   //2   
SEG_A|SEG_B|SEG_C|SEG_D|OFF__|OFF__|SEG_G|OFF__,   //3   
OFF__|SEG_B|SEG_C|OFF__|OFF__|SEG_F|SEG_G|OFF__,   //4   
SEG_A|OFF__|SEG_C|SEG_D|OFF__|SEG_F|SEG_G|OFF__,   //5   
SEG_A|OFF__|SEG_C|SEG_D|SEG_E|SEG_F|SEG_G|OFF__,   //6   
SEG_A|SEG_B|SEG_C|OFF__|OFF__|OFF__|OFF__|OFF__,   //7   
SEG_A|SEG_B|SEG_C|SEG_D|SEG_E|SEG_F|SEG_G|OFF__,   //8
SEG_A|SEG_B|SEG_C|OFF__|OFF__|SEG_F|SEG_G|OFF__,   //9   
OFF__|OFF__|OFF__|OFF__|OFF__|OFF__|OFF__|INV__,   //:    
OFF__|OFF__|OFF__|OFF__|OFF__|OFF__|OFF__|INV__,   //;    
OFF__|OFF__|OFF__|SEG_D|SEG_E|OFF__|OFF__|OFF__,   //<    
OFF__|OFF__|OFF__|OFF__|SEG_D|OFF__|SEG_G|OFF__,   //=    
OFF__|OFF__|SEG_C|SEG_D|OFF__|OFF__|OFF__|OFF__,   //>    
OFF__|OFF__|OFF__|OFF__|OFF__|OFF__|OFF__|INV__,   //?    
OFF__|OFF__|OFF__|OFF__|OFF__|OFF__|OFF__|INV__,   //@    
SEG_A|SEG_B|SEG_C|OFF__|SEG_E|SEG_F|SEG_G|OFF__,   //A   
OFF__|OFF__|SEG_C|SEG_D|SEG_E|SEG_F|SEG_G|OFF__,   //B   
SEG_A|OFF__|OFF__|SEG_D|SEG_E|SEG_F|OFF__|OFF__,   //C  
OFF__|SEG_B|SEG_C|SEG_D|SEG_E|OFF__|SEG_G|OFF__,   //D   
SEG_A|OFF__|OFF__|SEG_D|SEG_E|SEG_F|SEG_G|OFF__,   //E   
SEG_A|OFF__|OFF__|OFF__|SEG_E|SEG_F|SEG_G|OFF__,   //F 
SEG_A|OFF__|SEG_C|SEG_D|SEG_E|SEG_F|SEG_G|OFF__,   //G    
OFF__|SEG_B|SEG_C|OFF__|SEG_E|SEG_F|SEG_G|OFF__,   //H    
OFF__|OFF__|OFF__|OFF__|SEG_E|SEG_F|OFF__|OFF__,   //I    
OFF__|SEG_B|SEG_C|SEG_D|SEG_E|OFF__|OFF__|OFF__,   //J    
OFF__|SEG_B|SEG_C|OFF__|SEG_E|SEG_F|SEG_G|OFF__,   //K    
OFF__|OFF__|OFF__|SEG_D|SEG_E|SEG_F|OFF__|OFF__,   //L    
OFF__|OFF__|SEG_C|OFF__|SEG_E|OFF__|SEG_G|OFF__,   //M    
OFF__|OFF__|SEG_C|OFF__|SEG_E|OFF__|SEG_G|OFF__,   //N    
OFF__|OFF__|SEG_C|SEG_D|SEG_E|OFF__|SEG_G|OFF__,   //O    
SEG_A|SEG_B|OFF__|OFF__|SEG_E|SEG_F|SEG_G|OFF__,   //P    
SEG_A|SEG_B|SEG_C|OFF__|OFF__|SEG_F|SEG_G|OFF__,   //Q    
OFF__|OFF__|OFF__|OFF__|SEG_E|OFF__|SEG_G|OFF__,   //R    
SEG_A|OFF__|SEG_C|SEG_D|OFF__|SEG_F|SEG_G|OFF__,   //S    
OFF__|OFF__|OFF__|SEG_D|SEG_E|SEG_F|SEG_G|OFF__,   //T    
OFF__|OFF__|SEG_C|SEG_D|SEG_E|OFF__|OFF__|OFF__,   //U    
OFF__|OFF__|SEG_C|SEG_D|SEG_E|OFF__|OFF__|OFF__,    //V    
OFF__|OFF__|SEG_C|SEG_D|SEG_E|OFF__|OFF__|OFF__,    //W    
OFF__|SEG_B|SEG_C|OFF__|SEG_E|SEG_F|SEG_G|OFF__,   //X    
OFF__|SEG_B|SEG_C|SEG_D|OFF__|SEG_F|SEG_G|OFF__,   //Y    
SEG_A|SEG_B|OFF__|SEG_D|SEG_E|OFF__|SEG_G|OFF__,   //Z    
SEG_A|OFF__|OFF__|SEG_D|SEG_E|SEG_F|OFF__|OFF__,   //[    
OFF__|OFF__|SEG_C|OFF__|OFF__|SEG_F|SEG_G|OFF__,   // backslash    
SEG_A|SEG_B|SEG_C|SEG_D|OFF__|OFF__|OFF__|OFF__,   //]    
SEG_A|SEG_B|OFF__|OFF__|OFF__|SEG_F|OFF__|OFF__,   //^    
OFF__|OFF__|OFF__|SEG_D|OFF__|OFF__|OFF__|OFF__,   //_    
OFF__|OFF__|OFF__|OFF__|OFF__|SEG_F|OFF__|OFF__,   //`    
SEG_A|SEG_B|SEG_C|OFF__|SEG_E|SEG_F|SEG_G|OFF__,   //a    
OFF__|OFF__|SEG_C|SEG_D|SEG_E|SEG_F|SEG_G|OFF__,   //b    
SEG_A|OFF__|OFF__|SEG_D|SEG_E|SEG_F|OFF__|OFF__,   //c    
OFF__|SEG_B|SEG_C|SEG_D|SEG_E|OFF__|SEG_G|OFF__,   //d    
SEG_A|OFF__|OFF__|SEG_D|SEG_E|SEG_F|SEG_G|OFF__,   //e    
SEG_A|OFF__|OFF__|OFF__|SEG_E|SEG_F|SEG_G|OFF__,   //f    
SEG_A|OFF__|SEG_C|SEG_D|SEG_E|SEG_F|SEG_G|OFF__,   //g    
OFF__|SEG_B|SEG_C|OFF__|SEG_E|SEG_F|SEG_G|OFF__,   //h    
OFF__|OFF__|OFF__|OFF__|SEG_E|SEG_F|OFF__|OFF__,   //i    
OFF__|SEG_B|SEG_C|SEG_D|SEG_E|OFF__|OFF__|OFF__,   //j    
OFF__|SEG_B|SEG_C|OFF__|SEG_E|SEG_F|SEG_G|OFF__,   //k    
OFF__|OFF__|OFF__|SEG_D|SEG_E|SEG_F|OFF__|OFF__,   //l    
OFF__|OFF__|SEG_C|OFF__|SEG_E|OFF__|SEG_G|OFF__,   //m    
OFF__|OFF__|SEG_C|OFF__|SEG_E|OFF__|SEG_G|OFF__,   //n    
OFF__|OFF__|SEG_C|SEG_D|SEG_E|OFF__|SEG_G|OFF__,   //o    
SEG_A|SEG_B|OFF__|OFF__|SEG_E|SEG_F|SEG_G|OFF__,   //p    
SEG_A|SEG_B|SEG_C|OFF__|OFF__|SEG_F|SEG_G|OFF__,   //q    
OFF__|OFF__|OFF__|OFF__|SEG_E|OFF__|SEG_G|OFF__,   //r    
SEG_A|OFF__|SEG_C|SEG_D|OFF__|SEG_F|SEG_G|OFF__,   //s    
OFF__|OFF__|OFF__|SEG_D|SEG_E|SEG_F|SEG_G|OFF__,   //t    
OFF__|OFF__|SEG_C|SEG_D|SEG_E|OFF__|OFF__|OFF__,   //u    
OFF__|OFF__|SEG_C|SEG_D|SEG_E|OFF__|OFF__|OFF__,   //v    
OFF__|OFF__|SEG_C|SEG_D|SEG_E|OFF__|OFF__|OFF__,   //w    
OFF__|SEG_B|SEG_C|OFF__|SEG_E|SEG_F|SEG_G|OFF__,   //x    
OFF__|SEG_B|SEG_C|SEG_D|OFF__|SEG_F|SEG_G|OFF__,   //y    
SEG_A|SEG_B|OFF__|SEG_D|SEG_E|OFF__|SEG_G|OFF__,   //z    
SEG_A|OFF__|OFF__|SEG_D|SEG_E|SEG_F|OFF__|OFF__,   //{    
OFF__|OFF__|OFF__|OFF__|SEG_E|SEG_F|OFF__|OFF__,   //|    
SEG_A|SEG_B|SEG_C|SEG_D|OFF__|OFF__|OFF__|OFF__,   //}    
SEG_A|OFF__|OFF__|OFF__|OFF__|OFF__|OFF__|OFF__,   //~    

};

typedef enum {
	TM1637_MODE_BUFFER_DEC = 0,
	TM1637_MODE_BUFFER_HEX = 1,
	TM1637_MODE_STRING = 2, 
            TM1637_MODE_RAW = 3,
	TM1637_MODE_ANIMATION = 4,
            
}TM1637_MODE_t;
typedef struct tm1637_n{
	//uint16_t animationAddress;
	//uint16_t animationDelay;
	//uint16_t lastValue;
	uint8_t outputBuffer[6];
	uint8_t displayOrder[6];
	uint8_t displayArray[6];
	uint8_t lastDisplay [6];
	uint8_t outputState;
	uint8_t dioPin;
	uint8_t sourcePin;
	uint8_t decimalPointBitmap; ///< Least significant is first digit's decimal
	uint8_t firstDigit:4;
	uint8_t lastDigit:4;
	uint8_t bitOutput:4;
        uint8_t brightness:4;
	//uint8_t animationCurrentFrame;
	//uint8_t animationFrames;
	uint8_t mode:4;
}tm1637_t;


#define tm1637 ((tm1637_t*) CurrentPinRegister)
void DIO_LOW() { 
    PinLow(tm1637->dioPin);
}
void  DIO_HIGH() { 
    PinHigh(tm1637->dioPin);
}
void CLK_LOW() { 
    CurrentPinLow();
}
void CLK_HIGH() { 
    CurrentPinHigh();
}
void SET_DIO(_value) { 
   SetPin(tm1637->dioPin, _value);
}


void tm1637Start()
{
	DIO_LOW();
}

void tm1637Stop()
{
    SetPinQuick(CurrentPin,0);
    SetPinQuick(tm1637->dioPin,0);
	CLK_HIGH();
	DIO_HIGH();
}

void tm1637ClockByte(uint8_t data)
{
    uint8_t i;
	for (i = 0; i < 8; ++i)
	{
		SetPinQuick(CurrentPin,0);
		SetPinQuick(tm1637->dioPin,(data & 0x01) > 0);
		SetPinQuick(CurrentPin,1);
		data >>=1;
	}
    SetPinQuick(CurrentPin,0);
	DIO_LOW();
	CLK_HIGH();
}

#define tm1637 ((tm1637_t*) CurrentPinRegister)

void tm1637_hwinit()
{
	CurrentPinHigh();
	PinHigh(tm1637->dioPin);
}


void tm1637SendMemoryWrite()
{
	tm1637ClockByte(0x40);  //Write data, Increment address, normal mode
}

void tm1637SendInitialAddress()
{
	tm1637ClockByte(0xC0); // Address command, CH0H	
}

void tm1637SendData(uint8_t data)
{
	tm1637ClockByte(data);
}

void tm1637SendDisplayControlCommand(uint8_t command)
{
	tm1637ClockByte(0x88 | (command & 0x07));  //Set display control, on, + brightness
}

typedef enum {
    
    TM1637_OUTPUT_STATE_SETUP = 0xF0,
    TM1637_OUTPUT_STATE_SET_ADDR = 0xF1,
            TM1637_OUTPUT_STATE_DISPLAY_CONTROL_COMMAND = 0xF2,
            TM1637_OUTPUT_STATE_IDLE = 0xF3
}TM1637_OUTPUT_STATE_t;
/*!
    \brief Initialization routine for Analog Input

----


CONFIGURE_CHANNEL_MODE_0:
---------------------

Initialize Analog Input.  Disables averaged and filtered values.


|BYTE 0          |BYTE 1          |BYTE 2          |BYTE 3          |BYTE 4          |BYTE 5          |BYTE 6          |BYTE 7          |
|:---------------|:---------------|:---------------|:---------------|:---------------|:---------------|:---------------|:---------------|
|0xC0|Pin To Set|0x0A (TM1637 ) | Second Pin |Last digit Index | Mode |Public Data | 0x55* |

\*0x55 is recommended, but any byte is acceptable

Response:

Command is echoed back.

Examples:

Set pin 3 to Analog Input. //TODO

> `0xC0 0x03 0x02 0x55 0x55 0x55 0x55 0x55 `

----
*/

void initTM1637 (void)
{

	switch(Rxbuffer[0])
	{
		case CONFIGURE_CHANNEL_MODE_0:
			{
				if (pinPort[Rxbuffer[3]] != CurrentPinPort())
				{
					//Pins must be on same port
					CurrentPinRegister->generic.mode = PIN_MODE_CONTROLLED;
					error(SW_ERROR_PINS_MUST_BE_ON_SAME_PORT);
					return;
				}
				CurrentPinRegister->generic.mode =PIN_MODE_TM1637;
				tm1637->dioPin = Rxbuffer[3];
				SetMode(tm1637->dioPin, PIN_MODE_CONTROLLED);
				tm1637->lastDigit  = Rxbuffer[4] - 1;
				tm1637->firstDigit = 0;
				tm1637->mode = Rxbuffer[5];
				tm1637->sourcePin = Rxbuffer[6];
				tm1637->outputState = TM1637_OUTPUT_STATE_SETUP;
				tm1637->brightness = Rxbuffer[7];
                tm1637->decimalPointBitmap = 0;
				uint8_t i;
				for (i = 0; i < 6; ++ i)
				{
					tm1637->displayOrder[i] = i;
					tm1637->lastDisplay [i] = 0;
				}
				tm1637_hwinit();
			}
			break;

		case CONFIGURE_CHANNEL_MODE_1:
			{
				if (CurrentPinRegister->generic.mode == PIN_MODE_TM1637)
				{
					tm1637->displayOrder[0] = Rxbuffer[3];
					tm1637->displayOrder[1] = Rxbuffer[4];
					tm1637->displayOrder[2] = Rxbuffer[5];
					tm1637->displayOrder[3] = Rxbuffer[6];
					tm1637->displayOrder[4] = Rxbuffer[7];
				}
				else
				{
					error(SW_ERROR_PIN_CONFIG_WRONG_ORDER);
				}
			}
			break;

		case CONFIGURE_CHANNEL_MODE_2:
			{
				if (CurrentPinRegister->generic.mode == PIN_MODE_TM1637)
				{
					tm1637->displayOrder[5] = Rxbuffer[3];
				}
				else
				{
					error(SW_ERROR_PIN_CONFIG_WRONG_ORDER);
				}
			}
			break;

		case CONFIGURE_CHANNEL_MODE_3: 
			{
				if (CurrentPinRegister->generic.mode == PIN_MODE_TM1637)
				{
					tm1637->brightness = Rxbuffer[3] & 0x07;
				}
				else
				{
					error(SW_ERROR_PIN_CONFIG_WRONG_ORDER);
				}
			}
			break;

		case CONFIGURE_CHANNEL_MODE_4: 
			{
				if (CurrentPinRegister->generic.mode == PIN_MODE_TM1637)
				{
					tm1637->outputBuffer[0] = Rxbuffer[3];
					tm1637->outputBuffer[1] = Rxbuffer[4];
					tm1637->outputBuffer[2] = Rxbuffer[5];
					tm1637->outputBuffer[3] = Rxbuffer[6];
					tm1637->outputBuffer[4] = Rxbuffer[7];
				}
				else
				{
					error(SW_ERROR_PIN_CONFIG_WRONG_ORDER);
				}
			}
			break;
		case CONFIGURE_CHANNEL_MODE_5: 
			{
				if (CurrentPinRegister->generic.mode == PIN_MODE_TM1637)
				{
					tm1637->outputBuffer[5] = Rxbuffer[3];
				}
				else
				{
					error(SW_ERROR_PIN_CONFIG_WRONG_ORDER);
				}
			}
			break;
            case CONFIGURE_CHANNEL_MODE_6: 
			{
				if (CurrentPinRegister->generic.mode == PIN_MODE_TM1637)
				{
					tm1637->decimalPointBitmap = Rxbuffer[3];
				}
				else
				{
					error(SW_ERROR_PIN_CONFIG_WRONG_ORDER);
				}
			}
			break;

		default:
			{
				error(SW_ERROR_INVALID_PIN_COMMAND);
			}
			break;
	}
}

void tm1637UpdateRender()
{
uint8_t renderArray[6];
	
	if (tm1637->mode == TM1637_MODE_BUFFER_DEC)
	{
		renderArray[0] = '0';
		uint16ToAscii5(GetBuffer(tm1637->sourcePin) ,&renderArray[1]);  //TODO genericise
	}
	else if (tm1637->mode == TM1637_MODE_BUFFER_HEX)
	{
		renderArray[0] = '0';
		renderArray[1] = '0';
		 uint16ToAsciiHex4(GetBuffer(tm1637->sourcePin), &renderArray[2]) ;
	}
	else if (tm1637->mode == TM1637_MODE_RAW)
	{
		renderArray[0] = tm1637->outputBuffer[0];
		renderArray[1] = tm1637->outputBuffer[1];
		renderArray[2] = tm1637->outputBuffer[2];
		renderArray[3] = tm1637->outputBuffer[3];
		renderArray[4] = tm1637->outputBuffer[4];
		renderArray[5] = tm1637->outputBuffer[5];
	}
	uint8_t i;
	else if (tm1637->mode == TM1637_MODE_STRING)
	{
		renderArray[0] = seven_seg_table[tm1637->outputBuffer[0]];
		renderArray[1] = seven_seg_table[tm1637->outputBuffer[1]];
		renderArray[2] = seven_seg_table[tm1637->outputBuffer[2]];
		renderArray[3] = seven_seg_table[tm1637->outputBuffer[3]];
		renderArray[4] = seven_seg_table[tm1637->outputBuffer[4]];
		renderArray[5] = seven_seg_table[tm1637->outputBuffer[5]];
	}
    if (tm1637->decimalPointBitmap)
    {
	for (i = 0; i < 6; ++i)
	{
        if (tm1637->decimalPointBitmap & (1 << i))
        {
            renderArray[ i] |= 0x80;
        }
    }
    }

	for (i = 0; i < 6; ++i)
	{
		tm1637->displayArray[i] = renderArray[tm1637->displayOrder[i]];
	}
}
void updateTM1637()
{ 

 
	
	switch (tm1637->outputState)
	{
		case TM1637_OUTPUT_STATE_SETUP:
			{
                tm1637UpdateRender();
				tm1637Start();

				tm1637SendMemoryWrite();
				tm1637Stop();
				tm1637->outputState = TM1637_OUTPUT_STATE_SET_ADDR;
			}
			break;

		case TM1637_OUTPUT_STATE_SET_ADDR:
			{
				tm1637Start();
				tm1637SendInitialAddress();
				tm1637->outputState = tm1637->firstDigit;
			}
			break;

		case 0:
		case 1:
		case 2:
		case 3:
		case 4:
		case 5:
			{

				uint8_t value = 0;

				if (tm1637->mode == TM1637_MODE_RAW  || tm1637->mode == TM1637_MODE_STRING)
				{
					value = tm1637->displayArray[tm1637->outputState];

				}
				else
				{
					value = seven_seg_table[(tm1637->displayArray[tm1637->outputState] - ' ' )];
				}
				tm1637SendData(value);
				++ tm1637->outputState;
				if (tm1637->outputState > tm1637->lastDigit)
				{
					tm1637->outputState = TM1637_OUTPUT_STATE_DISPLAY_CONTROL_COMMAND;
				}
			}

			break;

		case TM1637_OUTPUT_STATE_DISPLAY_CONTROL_COMMAND:
			{
				tm1637Stop();
				tm1637Start();
				tm1637SendDisplayControlCommand(tm1637->brightness);
				tm1637Stop();
				tm1637->outputState = TM1637_OUTPUT_STATE_SETUP;
			}
			break;
	}

}


